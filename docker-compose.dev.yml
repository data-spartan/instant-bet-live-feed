version: '3.8'
networks:
  live-feed-network:
    driver: bridge

  #join pre-existing network in case of diff service network
  # instantbet-scraper_redis-scraper-network:
  #   external: true

services:
  zookeeper-0:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper-0
    container_name: zookeeper-0
    environment:
      ZOOKEEPER_SERVER_ID: 0
      ZOOKEEPER_CLIENT_PORT: 2181
      # ZOOKEEPER_PEER_PORT: 2888
      # ZOOKEEPER_LEADER_PORT: 3888
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      LOG_DIR: /var/lib/zookeeper/log
      # ZOOKEEPER_SERVERS: 'zookeeper-0:2888:3888;zookeeper-1:2889:3889'
    volumes:
      - zk-0-data:/var/lib/zookeeper/data
      - zk-0-log:/var/lib/zookeeper/log

    ports:
      - ${ZOOKEEPER_0_PORT}:2181
      # - 2888:2888
      # - 3888:3888
    networks:
      - live-feed-network
    restart: unless-stopped

  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper-1
    container_name: zookeeper-1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      # ZOOKEEPER_PEER_PORT: 2888
      # ZOOKEEPER_LEADER_PORT: 3888
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
      LOG_DIR: /var/lib/zookeeper/log
      # ZOOKEEPER_SERVERS: 'zookeeper-0:2888:3888;zookeeper-1:2889:3889'
    volumes:
      - zk-1-data:/var/lib/zookeeper/data
      - zk-1-log:/var/lib/zookeeper/log
    ports:
      - ${ZOOKEEPER_1_PORT}:2181
      # - 2889:2888
      # - 3889:3888
    networks:
      - live-feed-network
    restart: unless-stopped

  kafka-0:
    image: confluentinc/cp-kafka:latest
    hostname: broker-0
    container_name: broker-0
    depends_on:
      - zookeeper-0
      - zookeeper-1

    ports:
      - ${KAFKA_BROKER_0_PORT}:29092
    networks:
      - live-feed-network
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-0:2181,zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-0:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 48
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 45
      LOG_DIR: /var/log/kafka
      KAFKA_DATA_DIR: /var/lib/kafka

    volumes:
      - broker-0:/var/lib/kafka/data
      - broker-0-log:/var/log/kafka
        # - kafka-broker-1:/var/lib/kafka/data

  kafka-1:
    image: confluentinc/cp-kafka:latest
    hostname: broker-1
    container_name: broker-1
    depends_on:
      - zookeeper-0
      - zookeeper-1
    ports:
      - ${KAFKA_BROKER_1_PORT}:39092
    networks:
      - live-feed-network
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-0:2181,zookeeper-1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 48
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 45
      LOG_DIR: /var/log/kafka
      KAFKA_DATA_DIR: /var/lib/kafka

    volumes:
      - broker-1:/var/lib/kafka/data
      - broker-1-log:/var/log/kafka

  kafdrop-live-feed:
    container_name: live-feed-kafdrop
    image: obsidiandynamics/kafdrop:latest
    environment:
      - KAFKA_BROKERCONNECT=kafka-0:9092,kafka-1:9092
    ports:
      - ${KAFDROP_PORT}:9000
    networks:
      - live-feed-network
    #try n times before exiting
    restart: on-failure:10
    depends_on:
      - kafka-0
      - kafka-1

  mongodb-live-feed-1:
    image: mongo:latest
    container_name: mongodb-live-feed-1
    # command: [--auth]
    environment:
      MONGO_INITDB_DATABASE: admin
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27017:27017
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs","--port", "27017" ]
    networks:
      - live-feed-network
    restart: unless-stopped
    volumes:
      - mongodb-1:/data/db

  mongosetup:
    image: mongo:latest
    depends_on:
      - mongodb-live-feed-1
      - mongodb-live-feed-2
      - mongodb-live-feed-3
    restart: "no"
    networks:
      - live-feed-network
    volumes:
      - ./mongo-scripts:/mongo-scripts
    entrypoint: [ "bash", "-c", "mongo-scripts/rs-init.sh"]      

    # command: mongod
    # healthcheck:
    #   test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $MONGODB_USERNAME -p $MONGODB_PASSWORD --quiet | grep 1
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 15s
    # depends_on:
    #   - mongodb-live-feed-2
    #   - mongodb-live-feed-3        
    
  mongodb-live-feed-2:
    image: mongo:latest
    container_name: mongodb-live-feed-2
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27018:27017
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ,"--port", "27017"]
    networks:
      - live-feed-network
    restart: unless-stopped
    volumes:
      - mongodb-2:/data/db
    # command: mongod
    # healthcheck:
    #   test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $MONGODB_USERNAME -p $MONGODB_PASSWORD --quiet | grep 1
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 15s
      
  
  mongodb-live-feed-3:
    image: mongo:latest
    container_name: mongodb-live-feed-3
    environment:
      MONGO_INITDB_DATABASE: admin
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27019:27017
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ,"--port", "27017"]
    networks:
      - live-feed-network
    restart: unless-stopped
    volumes:
      - mongodb-3:/data/db
    # command: mongod
    # healthcheck:
    #   test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $MONGODB_USERNAME -p $MONGODB_PASSWORD --quiet | grep 1
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
  #     start_period: 15s
    

  redis-live:
    image: redis:latest
    container_name: instanbet-livefeed-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis-data:/data
    networks:
      - live-feed-network
    restart: unless-stopped
    healthcheck: 
      test: ["CMD-SHELL", "echo 'auth ${REDIS_PASSWORD}\nping' | redis-cli | grep PONG"]
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 15s #When starting up redis, loading the dataset in memory is a healthy state, even if the redis server is not usable

  live-feed-app:
    container_name: live-feed
    build:
      context: ./
      target: dev
      dockerfile: ./apps/feed/Dockerfile
      # args:
      #   - ENV=${ENV}
    env_file:
      - '.env'
    ports:
      - ${APP_PORT}:${APP_PORT}
    networks:
      - live-feed-network
    volumes:
      - live-feed-logs:/usr/src/logs
      - .:/usr/src
      - /usr/src/node_modules
    restart: unless-stopped
    depends_on:
      - kafka-0
      - kafka-1
      - mongodb-live-feed-1
      - redis-live

volumes:
  zk-0-data:
    driver: local
  zk-0-log:
    driver: local
  zk-1-data:
    driver: local
  zk-1-log:
    driver: local
  broker-0:
    driver: local
  broker-0-log:
    driver: local
  broker-1:
    driver: local
  broker-1-log:
    driver: local
  mongodb-1:
    driver: local
  mongodb-2:
    driver: local
  mongodb-3:
    driver: local
  redis-data:
    driver: local
  live-feed-logs:
    driver: local
